*,
*::before,
*::after{
    box-sizing: border-box;
}

body{
    font-family: "微軟正黑體";
}

.container{
    width: 75%;
    padding-left: 15px;
    padding-right: 15px;
    margin: auto;
}

h1,
h2,
h3,
h4,
h5,
h6{
    margin:20px 0 20px;
}

p{
    margin-bottom: 1rem;
}

section{
    margin-bottom: 2rem !important;
}

// 單行註解無法編譯出去
/* 多行註解是可以編譯出去的 */
/* 原生變數可以被編譯出去 */
:root{
    --primary: #0d6efd;
    --secondary: #6c757d;
    --success: #198754;
    --info: #0dcaf0;
    --warning: #ffc107;
    --danger: #dc3545;
    --light: #f8f9fa;
    --dark: #212529;
}

/* SCSS 的變數，無法被編譯出去 */
// 用 $ 來宣告
$primary:#0d6efd;
$secondary: #6c757d;
$success: #198754;
$info: #0dcaf0;
$warning: #ffc107;
$danger: #dc3545;
$light: #f8f9fa;
$dark: #212529;
$white:#fff;

// 全域變數
$width:200px;
$mycolor:red;

.foo{
    // 區域變數
    $width:100px;
    width:$width;
    color: $mycolor;
}

// 只要符合 CSS 規範的值都可以設定變數
$gradient:linear-gradient(0deg, rgb(197, 202, 170) 0%, rgb(215, 231, 172)25%, rgb(250, 231, 171)75%);
$border:5px solid #fff;
$border-radius:0.5rem;
$padding:0.5rem 0.6rem;
$margin-bottom:1rem;
$shadow:0 0 5px rgba(0,0,0,0.8);

h1{
    line-height: 1;
    background: $gradient;
    color:$white;
    border:$border;
    border-radius: $border-radius;
    padding: $padding;
    /* 編譯後自動加上前綴詞 -webkit */
    box-shadow: $shadow;
    margin-bottom: $margin-bottom;
    color: $secondary;
}

/* 流程控制 */
$number:1;
// 可以使用內建函式 (Sass 提供許多內建函式)
// random 從 1 開始，範例是 1~3 隨機一個數字
$number:random(3);

.mybox{
    width: 150px;
    height: 150px;
    display: flex;
    justify-content: center;
    align-items: center;

    @if $number == 1{
        background-color: thistle;
    }@else if $number == 2{
        background-color: palevioletred;
    }@else {
        background-color: pink ;
    }

    // 判斷會通過，字串分為有引號、沒引號
    @if(helloworld == 'helloworld') {
        font-style: italic;
    }

    $rich:'有錢';
    $time:'有時間';

    // and 去判斷兩運算式是否成立，不是使用 &&
    @if $rich == '有錢' and $time == '有時間'{
        color: white !important;
    }@else {
        color: yellow !important;
    }

    // or 去判斷兩算式其中之一成立，不是使用 ||
    $isRain:'YES';
    $isBusy:'NO';
    @if $isRain =='YES' or $isBusy =='YES'{
    font-weight: bolder;
    font-size: 50px;
    }

    /* 使用 not 去反運算式結果 */
    // not ($box-width == 100px)，not 去判斷括號裡面的運算式
    $box-width:50px;
    @if not ($box-width == 100px) {
        border: 10px dashed aquamarine;
    }@else {
        border: 10px dotted tomato;
    }

    $mySpacing: 20px;
    /* 內建函式 if()，類似三元運算式，因為是函式，因此 if 沒有@ */
    outline: if($mySpacing > 10px, 10px solid lightpink, 10px solid wheat)
}

/* 包含 end，跑 1、2、3 */
@for $i from 1 through 3 {
    .through-#{$i}{
        width: 50px * $i;
        height: 50px * $i;
        display: inline-block;
        background: #aaa;
    }
}

/* 不包含 end，跑 1、2 */
@for $i from 1 to 3 {
    .to-#{$i}{
        width: 50px * $i;
        height: 50px * $i;
        display: inline-block;
        background: #aaa;
    }
}

#section05{
    // ul .menu 後代選擇器，會選擇所有 ul 元素內的 class 為 menu 的後代元素
    // ul.menu  類別選擇器，會選擇 class 為 menu 的 ul 元素
    ul.menu{
        display: flex;
        list-style: none;

        li{
            width: 100px;
            text-align: center;
        
            a{
                color:white;
                text-decoration: none;
                background: black;
                padding: 0.5rem;
                display: block;
                // & 符號可以表示父層的選擇器
                &:hover{
                    color:wheat;
                    background: salmon;
                }
            }

            &+li{
                border-left:1px solid #fff ;
            }
        }
    }
}

#exercise {
	.row {
		display: flex;
	}
	.col {
		width: 31.333333%;
		margin: 1%;
		border: 1px solid #333;
		background: #fff;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
		transition: 0.5s;
		&:hover {
			transform: translateY(-20px);
		}

		img {
			width: 100%;
		}
	}
	a {
		text-decoration: none;
		color: black;
		&:hover {
			text-decoration: underline;
			color: green;
		}
	}
}

// #extend{
//     overflow: hidden;
// }

.clearfix::after{
    content:'';
    display: block;
    clear: both;
}

%extend4321{
    width: 50px;
    height: 50px;
    float: left;
}

.box1{
    @extend %extend4321;
    background: red;
}
.box2{
    @extend %extend4321;
    background: green;
}
.box3{
    @extend %extend4321;
    background: blue;
}

/* 計算 */
.box4{
    background: #000;

    /* 加法 */
    width: 50px + 50px;
    width: 50px + 50;
    height: 50px+ 50px;

    /* 減法 */
    width: 100px - 50px;
    width: 100px - 50;
    height: 100px - 50px;

    /* 乘法 */
    width: 50px * 2;
    // width: 50px * 2px; //兩個有單位相乘，邊議會掛掉，注意
    height: 50px * 2;

    /* 除法 */
    // width: 100px / 2;   // 編譯會過，但結果不對
    // 除法要養成習慣使用括號

    // 使用變數，不需要括號
    width: (100px / 2);
    $child: 500px;
    $mother: 10;
    height: $child / $mother;

    /* 若分子、分母都有單位，單位會被消除 */
    $child2: 10px;
    $mother2: 10px;
    line-height: $child2 / $mother2;

    /* 取餘數 */
    margin-top: 20px % 100;
}

/* 函式 */
// 定義一個函式
@function randomFont(){
    $result: random(3);
    @if ($result == 1) {
        @return 20px;
    }@else if ($result == 2) {
        @return 40px;
    }@else {
        @return 60px;
    }
}

// 傳參數
@function boxLength1($length, $base){
    @return $length * $base * 1px;
}

// 指定預設值
@function boxLength2($length:100, $base: 1){
    @return $length * $base * 1px;
}

.funcbox {
    width: 100px;
    height: 100px;
    color: white;
    background: thistle;
    font-size:randomFont();
    width: boxLength1(100, 2);
    // 使用預設值
    height: boxLength2();
    // 指定參數值
    height: boxLength2(200,1);
}

// px to rem
@function rem($px) {
	// unit() 內建函式，判斷變數是否有 'px'
	@if (unit($px) == 'px') {
		@return ($px / 16px) * 1rem;
	} @else {
		@return ($px / 16) * 1rem;
	}
}

.rem{
    font-size: rem(16px);
    padding: rem(48);
}

$baseFontSize:14px;
$size:2px;
@function fontSize($level){
    // round 四捨五入，內建函式
    @return round($baseFontSize + $size * $level);
}

// 設定行高
$lineHeightLevel:1.5;
@function lineHeight($fontSize){
    @return $fontSize * $lineHeightLevel; 
}

#section08{
    $pink:#333;
    p{
        font-size: fontSize(3);
        line-height: lineHeight(30px);
        line-height: lineHeight(fontSize(3));
        // 內建函式
        // color:darken($color,90%);
        // color:lighten($color,10%);
    }
}

/* Mixins(混入) */
@mixin mixinTry(){
    width: 100px;
    height: 100px;
    background: #333;
}

/* 使用 @include 引入 mixin */
.mixinTry123{
    @include mixinTry();
}

// 設定參數以及預設值
@mixin box($width,$height,$bg,$border,$outline:10px dashed pink){
    width: $width;
    height: $height;
    background: $bg;
    border: $border;
    outline: $outline;
}

.boxflex{
    // @include box(100px, 100px, red, 5px solid #333)
    // 如果要省略跳過參數，需傳入 null
    @include box(100px, 100px, null, 5px solid #333)
}

@mixin btn-bg($bgcolor){
    // 一般樣式
    &{
        background: $bgcolor;
    }
    // 滑過去樣式
    &:hover{
        @if $bgcolor == #000{
            background-color: lighten($bgcolor, 50%);
        }@else{
            background-color: darken($bgcolor, 20%);
        }
    }
}
.btn{
    display: inline-block;
    color: #fff;
    text-decoration: none;
    line-height: 1.5;
    padding: 0.5rem;
    margin: 0 0.5rem;
    border-radius: 0.25rem;
}

.btn-dark{
    @include btn-bg(#000)
}
.btn-primary{
    @include btn-bg($primary)

}
.btn-success{
    @include btn-bg($success)

}
.btn-danger{
    @include btn-bg($danger)

}

/* 使用 @mixin + @content 來設計 RWD */
$breakpoint-sm:576px;
$breakpoint-md:768px;
$breakpoint-lg:992px;
$breakpoint-xl:1200px;
$breakpoint-xxl:1400px;

@mixin sm{
    @media (min-width: $breakpoint-sm){
        @content;
    }
}
@mixin md{
    @media (min-width: $breakpoint-md){
        @content;
    }
}
@mixin lg{
    @media (min-width: $breakpoint-lg){
        @content;
    }
}
@mixin xl{
    @media (min-width: $breakpoint-xl){
        @content;
    }
}
@mixin xxl{
    @media (min-width: $breakpoint-xxl){
        @content;
    }
}

#section10 {
	// xs
	.container {
		width: 100%;
	}

	.row {
		display: flex;
		flex-wrap: wrap;
	}

	.col {
		width: 100%;
		padding: 15px;
		border: 1px solid #333;
	}
	.col + .col {
		margin-top: 20px;
	}
	// sm
	@include sm {
		// @content 代表這裡面寫的樣式
		.container {
			width: 75%;
		}
		.col {
			width: 50%;
		}
		.col + .col {
			margin-top: 0;
		}
	}
	// md
	@include md {
		.col {
			width: 33.333333%;
		}
	}
	// lg
	@include lg {
		.col {
			width: 25%;
		}
	}
	// xl
	@include xl {
		.col {
			width: 20%;
		}
	}
	// xxl
	@include xxl {
		.col {
			width: 10%;
		}
	}
}

// navbar.scss
#navbar {
	// xs

	// sm
	@include sm {
	}
	// md
	@include md {
	}
	// lg
	@include lg {
	}
	// xl
	@include xl {
	}
	// xxl
	@include xxl {
	}
}

// footer.scss
#footer {
	// xs

	// sm
	@include sm {
	}
	// md
	@include md {
	}
	// lg
	@include lg {
	}
	// xl
	@include xl {
	}
	// xxl
	@include xxl {
	}
}

/* list (列表) 像 JS 的陣列，索引從 1 開始，不是 0 */
// 可以用逗號、空格去分隔表示，裡面的每個元素稱作 item
$width_list: 100px, 200px, 300px;
$margin_list: 10px 20px 30px 40px;
$bgColor_list:red,green,blue;
$zindex_list: 1 2 3 4;
$border_list:
    1px solid red,
    1px solid blue,
    1px solid green,
    1px solid yellow;

/* 用 nth(list, index) 取 item 值 */
.list{
    width: nth($width_list, 1);
    width: nth($width_list, 2);
    width: nth($width_list, 3);
    border: nth($border_list, 1);
    border: nth($border_list, 2);
    border: nth($border_list, 3);
    border: nth($border_list, 4);
}

/* 使用 index(list, value) 來取得索引 (index) */
.index{
    width: index($width_list, 100px);
    width: index($width_list, 200px);
    width: index($width_list, 300px);
    z-index:index($bgColor_list, red);
    z-index:index($bgColor_list, green);
    z-index:index($bgColor_list, blue);
}

/* 用 length($list) 取 list 的長度 */
.length{
    z-index: length($bgColor_list);
}

/* 搭配 @for 使用迴圈去做動作 */
/* # {} 插值語法 (模板字串)，類似 JS 的 ${} 或是 vue 的 {{ }} */
@for $i from 1 through length($bgColor_list){
    // .bg-(class) { background-color:(value) }
    .bg-#{nth($bgColor_list, $i)}{
        background-color: nth($bgColor_list, $i);
    }
}

/* 搭配 @each 去做動作 */
@each $value in $bgColor_list{
    .each-bg-#{$value}{
        background-color: $value;
    }
}

// 製作兩個 list 陣列
$list1: 1, 2, 3;
$list2: 8, 9, 10;

/* 使用 join($list, $list) 合併兩個陣列 */
.join{
    z-index: join($list1, $list2);
}


/* map (物件) */
/* map 寫完記得結尾加上 ; 分號 */

$map1:(
    primary:red,
    secondary:green,
    warning:blue,
);

@each $key, $value in $map1{
    /*  $key   自定義命名稱
        $value 實際綁定的 value
        可用靈活性高，改動時只需要更動實際的 value 值 */
    .bg-#{$key}{
        background-color: $value;
    }
}

// 物件包物件 (雙層物件)
$map2:(
    default:(
        width: 100px,
        height: 100px
    ),
    box1:(
        width: 200px,
        height: 200px
    ),
    box2:(
        width: 300px,
        height: 300px
    ),
);

/* 使用 map-get 取雙層物件的值 */
/*  $key   => 第一層物件 $map2 裡的 default、box1、box2
    $value => 第二層物件       裡的 width、height 值 */
@each $key, $value in $map2{
    $width:map-get($value, width);
    $height:map-get($value, height);
    .btn-#{$key}{
        width:$width;
        height: $height;
    }
}
